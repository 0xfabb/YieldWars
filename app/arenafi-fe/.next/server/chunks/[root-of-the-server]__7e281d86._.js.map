{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///home/fabxdev/arenafi/app/arenafi-fe/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\nimport {PrismaClient} from \"@prisma/client\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n// This check can be removed, it is just for tutorial purposes\nexport const hasEnvVars =\n  process.env.NEXT_PUBLIC_SUPABASE_URL &&\n  process.env.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY;\n\n\nexport const prisma = new PrismaClient();\n  "],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,IAAA,wKAAO,EAAC,IAAA,+IAAI,EAAC;AACtB;AAGO,MAAM,aACX;AAIK,MAAM,SAAS,IAAI,6IAAY","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///home/fabxdev/arenafi/app/arenafi-fe/app/api/user/%5Bemail%5D/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { prisma } from \"@/lib/utils\";\n\nexport async function GET(\n  req: Request,\n  { params }: { params: { email: string } }\n) {\n  try {\n    const email =  (await params).email;\n    console.log(email);\n    if (!email) {\n      return NextResponse.json({ error: \"Email is required\" }, { status: 400 });\n    }\n\n    const user = await prisma.user.findUnique({\n      where: {\n        email: email,\n        deleted: false\n      },\n      select: {\n        id: true,\n        name: true,\n        email: true,\n        walletAddress: true,\n        connectedWallet: true,\n        createdAt: true\n      }\n    });\n\n    if (!user) {\n      return NextResponse.json({ error: \"User not found\" }, { status: 404 });\n    }\n\n    return NextResponse.json(user);\n  } catch (error) {\n    console.error(\"Error fetching user:\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,IACpB,GAAY,EACZ,EAAE,MAAM,EAAiC;IAEzC,IAAI;QACF,MAAM,QAAS,CAAC,MAAM,MAAM,EAAE,KAAK;QACnC,QAAQ,GAAG,CAAC;QACZ,IAAI,CAAC,OAAO;YACV,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAoB,GAAG;gBAAE,QAAQ;YAAI;QACzE;QAEA,MAAM,OAAO,MAAM,wHAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACxC,OAAO;gBACL,OAAO;gBACP,SAAS;YACX;YACA,QAAQ;gBACN,IAAI;gBACJ,MAAM;gBACN,OAAO;gBACP,eAAe;gBACf,iBAAiB;gBACjB,WAAW;YACb;QACF;QAEA,IAAI,CAAC,MAAM;YACT,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}