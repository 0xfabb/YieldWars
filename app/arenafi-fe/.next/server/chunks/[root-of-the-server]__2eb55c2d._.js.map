{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///home/fabxdev/arenafi/app/arenafi-fe/lib/wallet/config.ts"],"sourcesContent":["export const MNEMONIC = \"legal winner thank year wave sausage worth useful legal winner thank yellow\""],"names":[],"mappings":";;;;AAAO,MAAM,WAAW","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///home/fabxdev/arenafi/app/arenafi-fe/lib/wallet/hdwallet.ts"],"sourcesContent":["import {HDNodeWallet} from \"ethers\";\nimport {mnemonicToSeedSync} from \"bip39\"\nimport {MNEMONIC} from \"./config\";\nimport { createHash } from \"crypto\";\n\nexport const createWalletCore = async (userId: string) => {\n    const indexFromUserId = parseInt(\n        createHash('sha256').update(userId).digest('hex').slice(0, 8),\n        16\n      ) % 2147483648; // fits in 31 bits\n      \n    const seed = mnemonicToSeedSync(MNEMONIC);  \n    const hdNode = HDNodeWallet.fromSeed(seed);\n    \n    const wallet = hdNode.derivePath(`m/44'/60'/${indexFromUserId}/0`);\n    console.log(wallet.address);    \n    \n    return {wallet, userId};\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEO,MAAM,mBAAmB,OAAO;IACnC,MAAM,kBAAkB,SACpB,IAAA,mHAAU,EAAC,UAAU,MAAM,CAAC,QAAQ,MAAM,CAAC,OAAO,KAAK,CAAC,GAAG,IAC3D,MACE,YAAY,kBAAkB;IAEpC,MAAM,OAAO,IAAA,6JAAkB,EAAC,qIAAQ;IACxC,MAAM,SAAS,4KAAY,CAAC,QAAQ,CAAC;IAErC,MAAM,SAAS,OAAO,UAAU,CAAC,CAAC,UAAU,EAAE,gBAAgB,EAAE,CAAC;IACjE,QAAQ,GAAG,CAAC,OAAO,OAAO;IAE1B,OAAO;QAAC;QAAQ;IAAM;AAC1B","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///home/fabxdev/arenafi/app/arenafi-fe/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\nimport {PrismaClient} from \"@prisma/client\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n// This check can be removed, it is just for tutorial purposes\nexport const hasEnvVars =\n  process.env.NEXT_PUBLIC_SUPABASE_URL &&\n  process.env.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY;\n\n\nexport const prisma = new PrismaClient();\n  "],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,IAAA,wKAAO,EAAC,IAAA,+IAAI,EAAC;AACtB;AAGO,MAAM,aACX;AAIK,MAAM,SAAS,IAAI,6IAAY","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file:///home/fabxdev/arenafi/app/arenafi-fe/app/api/create-wallet/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { createWalletCore } from \"@/lib/wallet/hdwallet\";\nimport { prisma } from \"@/lib/utils\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport async function POST(req: Request) {\n    try {\n        const payload = await req.json();\n        if(!payload.email || !payload.password || !payload.name){\n            return NextResponse.json({error: \"Missing email, password or name\"}, {status: 400});\n        }\n\n        const {email, password, name, extWallet} = payload;\n      \n        const randomId = uuidv4();\n        const wallet = await createWalletCore(randomId);  \n        const created = await prisma.user.create({\n            data: {\n                id: randomId,\n                name: name,\n                email: email,\n                password: password,\n                walletAddress:wallet.wallet.address,\n                privateKey: wallet.wallet.privateKey, \n                connectedWallet: extWallet || uuidv4()\n            }\n        })\n      \n        return NextResponse.json({wallet: created.walletAddress}, {status: 200});\n    } catch (error) {   \n        console.log(error); \n        return NextResponse.json({error: error instanceof Error ? error.message : \"Internal server error\"}, {status: 500});\n    }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,GAAY;IACnC,IAAI;QACA,MAAM,UAAU,MAAM,IAAI,IAAI;QAC9B,IAAG,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ,QAAQ,IAAI,CAAC,QAAQ,IAAI,EAAC;YACpD,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAC,OAAO;YAAiC,GAAG;gBAAC,QAAQ;YAAG;QACrF;QAEA,MAAM,EAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAC,GAAG;QAE3C,MAAM,WAAW,IAAA,mLAAM;QACvB,MAAM,SAAS,MAAM,IAAA,+IAAgB,EAAC;QACtC,MAAM,UAAU,MAAM,wHAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACrC,MAAM;gBACF,IAAI;gBACJ,MAAM;gBACN,OAAO;gBACP,UAAU;gBACV,eAAc,OAAO,MAAM,CAAC,OAAO;gBACnC,YAAY,OAAO,MAAM,CAAC,UAAU;gBACpC,iBAAiB,aAAa,IAAA,mLAAM;YACxC;QACJ;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAC,QAAQ,QAAQ,aAAa;QAAA,GAAG;YAAC,QAAQ;QAAG;IAC1E,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC;QACZ,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAC,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAAuB,GAAG;YAAC,QAAQ;QAAG;IACpH;AACJ","debugId":null}}]
}